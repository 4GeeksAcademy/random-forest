# -*- coding: utf-8 -*-
"""Clase_Algorithm_Optimization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17-i2FqKYvXUbrxpIA5A-pY7w6ma14I3q
"""

import itertools
import numpy as np

ls = [[1,2,3],[100,50,30],[4]]
# Output:190
def suma_importes(ls_compras):
  # Inicializamos la variable respuesta a 0 (la que contendrá en sumatorio)
  sumatorio = 0
  # Recorremos la lista de entrada
  for n in ls_compras:
    # Recorremos la lista sobre la que estamos iterando
    for num in n:
      # Sumamos cada número a la variable respuesta
      sumatorio+=num
  # Retornar la variable respuesta
  return sumatorio

# Commented out IPython magic to ensure Python compatibility.
# %time suma_importes(ls)

# Commented out IPython magic to ensure Python compatibility.
def suma_importes_1(ls_compras):
  return sum(itertools.chain.from_iterable(ls_compras))
# %time suma_importes_1(ls)

texto_1 = 'Hola mundo' #HM
def get_acronym(frase):
  # Definimos la variable respuesta como un string vacío
  res = ''
  # Crear una lista de palabras .split()
  ls_words = frase.split()
  # Recorrer la lista de palabras
  for w in ls_words:
    # Seleccionar la primera letra de cada palabra sobre la que estoy iterando
    letra = w[0].upper()
    # Guardarla en la variable respuesta
    res+=letra
  # Retornar la variable respuestas
  return res
get_acronym(texto_1)

[w[0] for w in texto_1.split()]

def get_acronym_1(frase):
  return "".join([w[0] for w in frase.split()]).upper()
get_acronym_1(texto_1)

ls_passengers = ['Rosa','Ana','José','Antonio']
seat_n1 = 1
seat_n2 = 3

def change_seat(ls_passengers, n1, n2):
  ls_passengers[n1], ls_passengers[n2] = ls_passengers[n2], ls_passengers[n1]
  return ls_passengers
change_seat(ls_passengers, seat_n1, seat_n2)

y_real = [0,0,1,1,0,1]
y_pred = [0,1,1,0,0,1]
# 0.666
def get_accuracy(y_real, y_pred):
  y_real = np.array(y_real)
  y_pred = np.array(y_pred)
  correct_predictions = np.sum(y_real==y_pred)
  accuracy = correct_predictions/len(y_real)
  return accuracy
get_accuracy(y_real, y_pred)

# Datos de ejemplo: lista de personas con sus edades
personas = [
    {"nombre": "Alice", "edad": 25},
    {"nombre": "Bob", "edad": 13},
    {"nombre": "Charlie", "edad": 22},
    {"nombre": "David", "edad": 15},
    {"nombre": "Eve", "edad": 28}
]
"""
Personas mayores de edad ordenadas por edad:
Eve tiene 28 años.
Alice tiene 25 años.
Charlie tiene 22 años.
"""

def get_overage(ls_p):
  # Creamos una lista respuesta que inicialmentem está vacía
  ls_n = []
  # Recorrer la lista de entrada
  for diccionario in ls_p:
    # Accedo a la edad de la persona sobre la que estoy iterando
    edad = diccionario['edad']
    # Compruebo si la edad es >=18
    if edad>=18:
      # Agrego el par overage:True al diccionario sobre el que itero
      diccionario['overage'] = True
    # else:
    else:
      # Agrego el par overage:False al diccionario sobre el que itero
      diccionario['overage'] = False
    # Guardo el diccionario modificado en la lista respuesta
    ls_n.append(diccionario)
  # Retornar la lista respuesta
  return ls_n

get_overage(personas)

personas

personas_1 = list(map(lambda x: {'nombre':x['nombre'],'edad':x['edad'],'overage':x['edad']>=18},
                      personas))
personas_1

personas_adultas = list(filter(lambda x: x['overage']==True, personas_1))
personas_adultas

personas_adultas.sort(key=lambda x:x['edad'], reverse=True)
personas_adultas#.reverse()
personas_adultas

personas_adultas

from functools import reduce
reduce(lambda x,y: x['edad']+y['edad'], personas_adultas)

from functools import reduce

# Lista de diccionarios
personas = [{'nombre': 'Eve', 'edad': 28, 'overage': True},
            {'nombre': 'Alice', 'edad': 25, 'overage': True},
            {'nombre': 'Charlie', 'edad': 22, 'overage': True}]

# Función para sumar las edades de dos diccionarios
def suma_edades(dic1, dic2):
    return {'edad': dic1['edad'] + dic2['edad']}

# Usar reduce para obtener la suma total de edades
suma_total = reduce(lambdA, personas)

# El resultado estará en el diccionario 'suma_total'
print(suma_total['edad'])