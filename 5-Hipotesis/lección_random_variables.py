# -*- coding: utf-8 -*-
"""Lección_Random_Variables.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iKCr2ZNg6pfGZsC4lPp-L0ylQZYK0K0r
"""

import numpy as np
import math
from scipy.stats import multinomial
from scipy.stats import binom
import scipy.stats as stats
import matplotlib.pyplot as plt

"""# 1.Aplicación distribución normal:"""

# Datos del problema
media = 219  # Media del colesterol sérico en mg/dL
desviacion = 50  # Desviación estándar del colesterol sérico en mg/dL

"""## A) Proporción de personas con niveles deseables de colesterol (< 200 mg/dL)

Recordemos que la función de probabilidad acumulada (CDF) nos informa acerca de la probabilidad de que nuestra variable tome cierto valor o menos. Por ende necesitamos calcular el área por debajo de la curva (definida por la función de densidad) desde menos infinito hasta el valor que queremos analizar.

<img src=https://matemovil.com/wp-content/uploads/2020/04/variable-aleatoria-continuaMesa-de-trabajo-1.jpg>
"""

prop_deseables = stats.norm.cdf(200, loc=media, scale=desviacion)
print(f"a) Proporción de personas con niveles deseables de colesterol: {prop_deseables:.7f}")

"""## B) Algunos investigadores creen que solo el colesterol con niveles superiores a 250 mg / dL indican un riesgo suficientemente alto para justificar el tratamiento. ¿Qué proporción de la población representa este grupo?"""

# b) Proporción de personas con niveles superiores a 250 mg/dL
prop_superior_250 = 1 - stats.norm.cdf(250, loc=media, scale=desviacion)
print(f"b) Proporción de personas con niveles superiores a 250 mg/dL: {prop_superior_250:.7f}")

"""## C) ¿Qué proporción de la población general tiene niveles límite de colesterol alto, es decir,> 200 pero menors de <250 mg / dL? Para efectuar este calculo restamos las probabilidades P(200<X<250)=P(X<250)-P(X<200)"""

# c) Proporción de personas con niveles entre 200 y 250 mg/dL
prop_entre_200_y_250 = (stats.norm.cdf(250, loc=media, scale=desviacion) -
                         stats.norm.cdf(200, loc=media, scale=desviacion))
print(f"c) Proporción de personas con niveles entre 200 y 250 mg/dL: {prop_entre_200_y_250:.7f}")

"""# 2.Aplicación de la distribución Binomial:

Distribución que cuenta el número de éxitos en una secuencia de n enseayos con una probabilidad p de éxito en cada ensayo. Sólo son posibles dos resultados (o éxito o fracas). En el caso de una variable discreta trabajamos con la función de masa.

## A) Se sabe que el 36,2% de los diabéticos tipo II son tratados con insulina. Si un centro de Salud dispone de 4 dosis de insulina. ¿Cuál es la probabilidad de necesitar exactamente las cuatro dosis si entran 10 diabéticos?
El número de dosis necesarias de los pacientes que entran en el centro sigue una
distribución binomial con el número de diabéticos como N observaciones y una
probabilidad de necesitar insulina de 0.362
"""

# Datos del problema
p = 0.362  # Probabilidad de necesitar insulina
N = 10     # Número de diabéticos que entran al centro de salud
n_dosis = 4  # Número de dosis disponibles

# Cuál es la probabilidad de necesitar exactamente las cuatro dosis si entran 10 diabéticos
prob_4_dosis = stats.binom.pmf(4, 100, p)
print(f"La probabilidad de utilizar exactamente cuatro dosis si llegan {N} pacientes es: {prob_4_dosis}")

# Cuál es la probabilidad de necesitar exactamente las cuatro dosis si entran 100 diabéticos
N = 100
print(f"La probabilidad de utilizar exactamente cuatro dosis si llegan {N} pacientes es: {stats.binom.pmf(4, N, p)}")

"""Cuantos más pacientes diabéticos lleguen lógicamente más dosis se necesitarán y consecuentemente la probabilidad de necesitar solo 4 dosis cuando llegan 100 pacientes con diabetes es prácticamente nula.

## B) ¿Cuál es la probabilidad de tener suficientes dosis?
La probabilida de tener suficientes dosis es la probabilidad de que ninguno necesite dosis ó 1 ó 2 ó 3 ó 4, es decir sumar estas probabilidades
"""

# Cuál es la probabilidad de tener suficientes dosis
N=10
prob_suficientes_dosis = sum(stats.binom.pmf(i, N, p) for i in range(n_dosis + 1))
print(f"La probabilidad de tener suficientes dosis si entran {N} pacientes es: {prob_suficientes_dosis}")

"""## C) Si entran 90 personas diabéticas en una semana. ¿Cuál sería el número esperado de usuarios de insulina?"""

# Si entran 90 personas diabéticas en una semana, cuál sería el número esperado de usuarios de insulina
N_nuevas = 90
esperanza_usuarios_insulina = N_nuevas * p
print(f"El número esperado de usuarios de insulina es: {esperanza_usuarios_insulina}")

"""## D) Plotear las probabilidades de éxito en 10 ensayos"""

# Crear una lista de valores posibles de X (número de éxitos)
x = np.arange(0, N + 1)

# Calcular las probabilidades correspondientes para cada valor de X
probabilidades = binom.pmf(x, N, p)

# Crear el gráfico de barras
plt.bar(x, probabilidades, align='center', alpha=0.7)
plt.xlabel('Número de Éxitos')
plt.ylabel('Probabilidad')
plt.title(f'Distribución Binomial (n={N}, p={p})')
plt.show()

"""La altura de cada barra en el gráfico representa la probabilidad de que ocurra ese número específico de éxitos. Por ejemplo, la barra más alta está en X = 3, lo que significa que la probabilidad de obtener exactamente 3 éxitos en 10 ensayos es la más alta.

Este tipo de distribución es útil para modelar eventos donde hay dos resultados posibles (éxito o fracaso) en cada ensayo, y estamos interesados en contar cuántos éxitos ocurren en un número fijo de ensayos. En este caso, el gráfico muestra la probabilidad de obtener 0, 1, 2, ..., 10 éxitos en 10 ensayos.

Es importante destacar que la suma de todas las probabilidades en este gráfico siempre será igual a 1, ya que uno de estos resultados debe ocurrir.

# 3.Aplicación de la distribución multinomial:
 La distribución multinomial se utiliza para modelar el número de ocurrencias de múltiples categorías o resultados en un cierto número de ensayos o experimentos independientes. Es apropiada cuando hay más de dos resultados posibles en cada ensayo y los ensayos son independientes.

## A) Usar la distribución multinomial para modelar la extracción de muestras de tamaño "n" de una población con cuatro grupos sanguíneos (A, B, AB y O) y contar el número de individuos de cada grupo en una muestra. Las frecuencias de estos grupos son 0.46 (A), 0.075 (B), 0.035 (AB) y 0.43 (O). En una muestra de 8 personas, ¿Cuál sería el número de personas esperado de cada grupo?
"""

# Definir los parámetros
N = 100  # Número de simulaciones
n = 8  # Tamaño muestral
proporciones = np.array([0.46, 0.075, 0.035, 0.43])  # Proporciones de grupos sanguíneos

# Teóricamente debemos multiplicar la probabilidad de ocurrencia de cada grupo sanguíneo por el tamaño de la muestra
n_teorico = proporciones*n
print("Número teórico de las personas de cada grupo:")
print(f"Grupo A: {n_teorico[0]:.2f}")
print(f"Grupo B: {n_teorico[1]:.2f}")
print(f"Grupo AB: {n_teorico[2]:.2f}")
print(f"Grupo O: {n_teorico[3]:.2f}")

# Realizar simulaciones multinomiales en Python
resultados_simulados = np.random.multinomial(n, proporciones, size=N)

# Calcular el promedio de individuos de cada grupo en las simulaciones
promedios = np.mean(resultados_simulados, axis=0)

print("Resultados promedio de las simulaciones:")
print(f"Grupo A: {promedios[0]:.2f}")
print(f"Grupo B: {promedios[1]:.2f}")
print(f"Grupo AB: {promedios[2]:.2f}")
print(f"Grupo O: {promedios[3]:.2f}")

# Valores de x para la distribución teórica
x = np.arange(len(proporciones))

# Valores y para el conteo de personas en las simulaciones
y = np.sum(resultados_simulados,0)

# Grafica la distribución multinomial
plt.bar(x, y, tick_label=['A', 'B', 'AB', 'O'], label='Muestra Observada')
plt.xlabel('Grupo Sanguíneo')
plt.ylabel('Número de Individuos')
plt.title('Distribución Multinomial de Grupos Sanguíneos')
plt.legend()
plt.show()

"""## B) En la misma muestra del caso anterior (de tamaño 8). ¿Cuál sería la probabilidad de obtener dos individuos de cada grupo?"""

nobs = np.array([2, 2, 2, 2])  # Número de individuos de cada grupo que queremos

"""La función devuelve la probabilidad de observar exactamente el conjunto de resultados especificado en `x` dado el número total de ensayos `n` y las probabilidades `p`.

En el contexto de la pregunta anterior sobre grupos sanguíneos, `x` representaría el número de individuos de cada grupo que queremos observar (por ejemplo, [2, 2, 2, 2]), `n` sería el tamaño total de la muestra (en este caso, 8), y `p` sería el vector de proporciones de grupos sanguíneos.
"""

# Calcular la probabilidad utilizando la distribución multinomial
probabilidad = multinomial.pmf(x=nobs, n=n, p=proporciones)
print(f"La probabilidad de obtener exactamente 2 individuos de cada grupo es: {probabilidad}")

# Calcular la probabilidad utilizando NumPy y la biblioteca estándar de Python
probabilidad = math.factorial(n) / np.prod([math.factorial(x) for x in nobs]) * np.prod(proporciones ** nobs)

print(f"La probabilidad de obtener exactamente 2 individuos de cada grupo es: {probabilidad}")

"""# 4.Aplicación distribución de Poisson:
El número medio de estancias en días para una intervención de cataratas es de 3,5
días. Si el número días para la intervención sigue una distribución Poisson:
"""

# Datos del problema
lambda_ = 3.5  # Media de estancias en días para una intervención de cataratas

"""## A) Cuál es la probabilidad de permanecer exactamente una semana (7 días):"""

# Cuál es la probabilidad de permanecer exactamente una semana (7 días)
prob_7_dias = stats.poisson.pmf(7, lambda_)
print(f"La probabilidad de permanecer exactamente una semana es: {prob_7_dias:.4f}")

"""## B) Cuál es la probabilidad de permanecer menos de una semana:
Esta probabilidad es la suma acumulada de no permanecer ningún día,1,2,3,4,5 o 6.
"""

prob_menos_7_dias = sum(stats.poisson.pmf(i, lambda_) for i in range(7))
print(f"La probabilidad de permanecer menos de una semana es: {prob_menos_7_dias:.4f}")

"""## C) Si se tienen 1000 pacientes, cuál es el número de días de estancia esperados:
El número esperado es simplemente multiplicar 1000 pacientes por el número
esperado para 1 paciente, es decir 1000*3.5=3500.
En una distribución de Poisson se puede cambiar a una nueva situación simplemente
cambiando el periodo de observación o como en este caso el número de pacientes.
"""

n_pacientes = 1000
dias_esperados = n_pacientes * lambda_
print(f"El número de días de estancia esperados para 1000 pacientes es: {dias_esperados:.2f}")

"""## D) En un estudio llevado a cabo en nuestro hospital se obtienen 35885 estancias en 10253 pacientes. ¿Se puede asumir que la estancia media en nuestro hospital es la mencionada anteriormente?

El número medio de días en este hospital seria de 35885/10253=3.499951
Este número es igual al del problema; para asumir que la estancia media en este
hospital es de 3.5 no basta con observar el dato . Habría que contrastar esta hipótesis. Lo que veremos en próximas actividades.
"""

estancias_observadas = 35885
pacientes_observados = 10253
media_real = estancias_observadas / pacientes_observados
print(f"La media de estancias observada en el hospital es: {media_real:.5f}")